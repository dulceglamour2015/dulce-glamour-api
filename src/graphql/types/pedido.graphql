type Pedido {
  id: ID
  _id: ID
  pedido: [PedidoGrupo]
  total: Float
  cliente: Cliente
  vendedor: Usuario
  fecha: String
  estado: EstadoPedido
  direccion: String
  pago: TipoPago
  descripcion: String
  costEnv: Float
  descuento: Float
  adicional: Float
  createdAt: String
  descripcionPedido: String
  image: File
}

type PedidoGrupo {
  id: ID
  cantidad: Int
  nombre: String
  precio: Float
  existencia: Int
  marca: String
}

type PageInfo {
  totalPages: Int
  totalDocs: Int
  nextPage: Int
}

type PedidoConnection {
  pageInfo: PageInfo
  pedidos: [Pedido]
}

input PedidoInput {
  pedido: [PedidoProductoInput]
  total: Float
  cliente: ID
  estado: EstadoPedido
  direccion: String
  pago: TipoPago
  descripcion: String
  costEnv: Float
  descuento: Float
  adicional: Float
  descripcionPedido: String
}

input PedidoProductoInput {
  id: ID
  cantidad: Int
  nombre: String
  precio: Float
}

enum TipoPago {
  BANCO
  EFECTIVO
  MIXTO
}

enum EstadoPedido {
  PENDIENTE
  PAGADO
  DESPACHADO
}

input Search {
  seller: String
  client: String
}

extend type Query {
  # Pedidos
  obtenerPedidos(page: Int): PedidoConnection
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  obtenerPedido(id: ID!): Pedido @hasRole(roles: [ADMINISTRADOR, USUARIO]) @auth
  totalPedidos: String!
  pedidosPagados(offset: Int): [Pedido]
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  pedidosDespachados(offset: Int): [Pedido]
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
}

extend type Mutation {
  # Pedidos
  actualizarPedido(id: ID!, input: PedidoInput, prevOrder: PedidoInput): Pedido
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  actualizarEstadoPedido(id: ID!, status: String!): Pedido
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  actualizarPagoPedido(id: ID!, input: PedidoInput!, file: Upload!): Pedido
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  eliminarPedido(id: ID!): String
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
  nuevoPedido(input: PedidoInput): Pedido @auth
  generarPdfPed(id: ID!): String @hasRole(roles: [ADMINISTRADOR, USUARIO]) @auth
  searchOrders(search: Search, page: Int): [Pedido]
    @hasRole(roles: [ADMINISTRADOR, USUARIO])
    @auth
}
